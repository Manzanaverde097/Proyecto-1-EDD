package Interfaces;


 
package Interfaces;
import Interfaces.VentanaPrincipal;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
/**
 *
 * @author vyckh
 */
public class VentanaCargaDiccionario extends javax.swing.JFrame {

    /**
     * Creates new form VentanaCargaDiccionario
     */
    public VentanaCargaDiccionario() {
        initComponents();
        this.setVisible(true);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setTitle("Cargar Diccionario");
        
        ContinuarJuego.setEnabled(false);

        // Muestra el diccionario actual (hardcodeado + lo que ya haya agregado el usuario)
        cargarDiccionarioEnTextArea();
        
    }
    
    private void cargarDiccionarioEnTextArea() {
        StringBuilder sb = new StringBuilder();
        // Obtén las palabras del diccionario global
        for (int i = 0; i < VentanaPrincipal.diccionario.getTamano(); i++) {
            sb.append(VentanaPrincipal.diccionario.obtener(i)).append("\n");
        }
        txtAreaCargarDiccionario.setText(sb.toString());
        txtAreaCargarDiccionario.setCaretPosition(0); // Vuelve al inicio
    }

  


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        CargarDiccionario = new javax.swing.JButton();
        Continuar = new javax.swing.JButton();
        Regresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaCargarDiccionario = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CargarDiccionario.setText("Cargar");
        CargarDiccionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarDiccionarioActionPerformed(evt);
            }
        });
        jPanel1.add(CargarDiccionario, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, -1, -1));

        Continuar.setText("Continuar");
        Continuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinuarActionPerformed(evt);
            }
        });
        jPanel1.add(Continuar, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 400, -1, -1));

        Regresar.setText("Regresar");
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });
        jPanel1.add(Regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 30, -1, -1));

        txtAreaCargarDiccionario.setColumns(20);
        txtAreaCargarDiccionario.setRows(5);
        jScrollPane1.setViewportView(txtAreaCargarDiccionario);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 330, 270));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargarDiccionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarDiccionarioActionPerformed
       String textoDiccionario = txtAreaCargarDiccionario.getText();
        if (textoDiccionario == null || textoDiccionario.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, introduce palabras en el diccionario.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Limpia el diccionario global actual para reconstruirlo con las nuevas entradas
        // Opcional: Podrías simplemente añadir sin limpiar si quieres un comportamiento de "añadir más"
        // Por simplicidad, aquí se reinicia para usar solo lo que está en el JTextArea
        VentanaPrincipal.diccionario = new EDD.Diccionario();

        // Añade las palabras introducidas por el usuario
        String[] palabrasUsuario = textoDiccionario.split("\\s+"); // Divide por espacios o saltos de línea
        int palabrasAgregadas = 0;
        for (String palabra : palabrasUsuario) {
            String palabraLimpia = trimAndToUpperCase(palabra);
            if (!palabraLimpia.isEmpty() && !VentanaPrincipal.diccionario.contiene(palabraLimpia)) {
                VentanaPrincipal.diccionario.agregar(palabraLimpia);
                palabrasAgregadas++;
            }
        }

        // También se pueden añadir las palabras hardcodeadas del inicio si no las has puesto en el JTextArea
        // o si el usuario borró todo y no queremos perder las palabras base.
        // Para este ejemplo, estamos asumiendo que el usuario SOBREESCRIBE con lo que pone en el JTextArea.
        // Si quieres que las palabras hardcodeadas SIEMPRE estén, cárgalas de nuevo aquí,
        // pero asegúrate de que el JTextArea las muestre también para que el usuario no las pierda al editar.
        // O una mejor solución sería que este JTextArea sirva solo para AÑADIR palabras.

        JOptionPane.showMessageDialog(this, "Diccionario cargado y actualizado. Total: " + VentanaPrincipal.diccionario.getTamano() + " palabras.", "Carga Exitosa", JOptionPane.INFORMATION_MESSAGE);
        Continuar.setEnabled(true); // Habilita el botón de continuar
    }

    // Método auxiliar para limpiar palabras (necesario también aquí)
    private String trimAndToUpperCase(String s) {
        if (s == null) return "";
        s = s.trim();
        if (s.isEmpty()) return "";
        return s.toUpperCase();
    }

        // TODO add your handling code here:
    }//GEN-LAST:event_CargarDiccionarioActionPerformed

    private void ContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinuarActionPerformed
    if (VentanaPrincipal.diccionario == null || VentanaPrincipal.diccionario.getTamano() == 0) {
             JOptionPane.showMessageDialog(this, "El diccionario está vacío. Por favor, carga palabras.", "Advertencia", JOptionPane.WARNING_MESSAGE);
             Continuar.setEnabled(false);
             return;
        }
        new VentanaJuegoSopaLetras().setVisible(true);
        this.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_ContinuarActionPerformed

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
    new VentanaPrincipal().setVisible(true);
        this.dispose();
    

// TODO add your handling code here:
    }//GEN-LAST:event_RegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaDiccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaDiccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaDiccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaCargaDiccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaCargaDiccionario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CargarDiccionario;
    private javax.swing.JButton Continuar;
    private javax.swing.JButton Regresar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaCargarDiccionario;
    // End of variables declaration//GEN-END:variables
}
